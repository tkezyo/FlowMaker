<rxui:ReactiveUserControl x:Class="FlowMaker.Views.FlowMakerDebugView"
              xmlns:rxui="http://reactiveui.net"
                xmlns:vms="clr-namespace:FlowMaker.ViewModels;assembly=FlowMaker.UIBase"
                x:TypeArguments="vms:FlowMakerDebugViewModel"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
            xmlns:hc="https://handyorg.github.io/handycontrol"
             xmlns:local="clr-namespace:FlowMaker.Views" 
                          xmlns:converters="clr-namespace:FlowMaker.Converters" 
  xmlns:app="clr-namespace:Ty;assembly=Ty.WPFBase" xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks" d:DataContext="{d:DesignInstance Type=vms:FlowMakerDebugViewModel}"
                          mc:Ignorable="d" 
   xmlns:dd="urn:gong-wpf-dragdrop"
                          x:Name="page"
             d:DesignHeight="450" d:DesignWidth="800">
    <UserControl.Resources>
        <Style TargetType="TextBox" BasedOn="{StaticResource TextBoxExtend.Small}"></Style>
        <Style TargetType="ComboBox" BasedOn="{StaticResource ComboBoxExtend.Small}"></Style>
        <converters:CountToVisibilityReConverter x:Key="CountToVisibilityReConverter" />
        <converters:SendEventVisibilityReConverter x:Key="SendEventVisibilityReConverter" />
        <converters:MonitorDebugConverter x:Key="MonitorDebugConverter" />
        <converters:EqualToVisibilityConverter x:Key="EqualToVisibilityConverter" />
    </UserControl.Resources>
    <DockPanel >
        <ScrollViewer  DockPanel.Dock="Top" MaxHeight="200"
       Padding="4,0">
            <WrapPanel Orientation="Horizontal">
                <StackPanel Orientation="Vertical" Margin="0,4">
                    <StackPanel Orientation="Horizontal">
                        <StackPanel Orientation="Horizontal" Visibility="{Binding Model.SingleRun,Converter={StaticResource Boolean2VisibilityReConverter}}">
                           
                            <Button  Command="{Binding RunCommand}" Style="{StaticResource ButtonPrimary.Small}"  Visibility="{Binding Model.Running,Converter={StaticResource Boolean2VisibilityReConverter}}" >
                                <iconPacks:PackIconPixelartIcons Kind="Play" />
                            </Button>
                            <Button Command="{Binding StopCommand}" Style="{StaticResource ButtonWarning.Small}" Visibility="{Binding Model.Running,Converter={StaticResource Boolean2VisibilityConverter}}" >
                                <iconPacks:PackIconPixelartIcons Kind="Pause" />
                            </Button>
                            <hc:CircleProgressBar Value="{Binding Model.Percent}"  Height="14" Width="14"  ArcThickness="2"  ShowText="False"  Style="{StaticResource ProgressBarInfoCircle}" Visibility="{Binding Model.Running,Converter={StaticResource Boolean2VisibilityConverter}}"></hc:CircleProgressBar>
                        </StackPanel>
                        <Button  Command="{Binding ShowEditCommand}" Content="{Binding Model.DisplayName}" Style="{StaticResource ButtonCustom}" >
                        </Button>
                    </StackPanel>
                    <Border BorderBrush="LightGray" BorderThickness="1" Margin="4,4" CornerRadius="3"  Visibility="{Binding ShowEdit,Converter={StaticResource Boolean2VisibilityConverter}}">
                        <WrapPanel  HorizontalAlignment="Left" >
                            <Button Command="{Binding DataContext.SaveConfigCommand,ElementName=page}" Style="{StaticResource ButtonSuccess.Small}" ToolTip="保存配置" Margin="2">
                                <iconPacks:PackIconPixelartIcons Kind="Save" />
                            </Button>
                            <Button  Command="{Binding DataContext.EditFlowCommand,ElementName=page}" Style="{StaticResource ButtonInfo.Small}" Margin="2" ToolTip="编辑流程">
                                <iconPacks:PackIconPixelartIcons Kind="Edit" />
                            </Button>
                            <ToggleButton  Style="{StaticResource ToggleButtonDefault.Small}"  IsChecked="{Binding ShowList}" Margin="2">
                                <iconPacks:PackIconPixelartIcons Kind="List" />
                            </ToggleButton>
                            <ToggleButton  Style="{StaticResource ToggleButtonDefault.Small}"  IsChecked="{Binding Model.SingleRun}" Margin="2">
                                <iconPacks:PackIconPixelartIcons Kind="Debug" />
                            </ToggleButton>
                        </WrapPanel>
                    </Border>
                    <GroupBox Header="事件" Margin="4,4" Style="{StaticResource GroupBoxTab.Small}"
                           Visibility="{Binding ShowEdit,Converter={StaticResource Boolean2VisibilityConverter}}">
                        <StackPanel Orientation="Vertical">
                            <!--<StackPanel.Visibility>
                                <MultiBinding Converter="{StaticResource SendEventVisibilityReConverter}">
                                    <Binding Path="DataDisplay" />
                                    <Binding Path="DataDisplay.WaitEvents.Count" />
                                </MultiBinding>
                            </StackPanel.Visibility>-->
                            <Button  Command="{Binding DataContext.SendEventCommand,ElementName=page}"  Style="{StaticResource ButtonPrimary.Small}" HorizontalAlignment="Left">
                                <iconPacks:PackIconPixelartIcons Kind="MailArrowRight" />
                            </Button>
                            <ComboBox ItemsSource="{Binding DataDisplay.WaitEvents}"
      DisplayMemberPath="Name"
      Text="{Binding Model.EventName,UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource ComboBoxExtend.Small}" hc:TitleElement.Title="名称:"  hc:TitleElement.TitlePlacement="Left" MinWidth="80" x:Name="eventName"/>
                            <TextBox 
Visibility="{Binding SelectedItem.NeedData,Converter={StaticResource Boolean2VisibilityConverter},ElementName=eventName}"
Text="{Binding Model.EventData,UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource TextBoxExtend.Small}" hc:TitleElement.Title="数据:"  hc:TitleElement.TitlePlacement="Left" MinWidth="80"/>
                        </StackPanel>
                    </GroupBox>
                

                </StackPanel>

                <GroupBox Header="基础" Margin="4,4" Style="{StaticResource GroupBoxTab.Small}"
                           Visibility="{Binding ShowEdit,Converter={StaticResource Boolean2VisibilityConverter}}">
                    <StackPanel>
                        <TextBox Text="{Binding Model.Repeat,UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource TextBoxExtend.Small}" hc:TitleElement.Title="重复:"  hc:TitleElement.TitlePlacement="Left"/>
                        <TextBox Text="{Binding Model.Retry,UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource TextBoxExtend.Small}" hc:TitleElement.Title="重试:"  hc:TitleElement.TitlePlacement="Left"/>
                        <TextBox Text="{Binding Model.Timeout,UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource TextBoxExtend.Small}" hc:TitleElement.Title="超时:"  hc:TitleElement.TitlePlacement="Left"/>
                        <CheckBox Content="错误后停止" IsChecked="{Binding Model.ErrorStop}"/>
                        <ComboBox ItemsSource="{Binding CustomLogs}" hc:TitleElement.Title="自定义日志" SelectedItem="{Binding Model.LogView}" Style="{StaticResource ComboBoxExtend.Small}" hc:TitleElement.TitlePlacement="Left"></ComboBox>
                    </StackPanel>
                </GroupBox>
                <GroupBox Header="属性" Margin="4,4" Style="{StaticResource GroupBoxTab.Small}" MinWidth="100"
                           Visibility="{Binding ShowEdit,Converter={StaticResource Boolean2VisibilityConverter}}">
                    <ItemsControl ItemsSource="{Binding Model.Data}"  Margin="0,4">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <WrapPanel></WrapPanel>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <StackPanel>
                                    <TextBox hc:TitleElement.Title="{Binding DisplayName}" MinWidth="50"  Text="{Binding Value,UpdateSourceTrigger=PropertyChanged}" hc:TitleElement.TitlePlacement="Left" Visibility="{Binding HasOption,Converter={StaticResource Boolean2VisibilityReConverter}}"/>
                                    <ComboBox  hc:TitleElement.Title="{Binding DisplayName}" hc:TitleElement.TitlePlacement="Left" ItemsSource="{Binding Options}" SelectedValue="{Binding Value,UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding HasOption,Converter={StaticResource Boolean2VisibilityConverter}}" SelectedValuePath="Name" DisplayMemberPath="DisplayName"/>
                                </StackPanel>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </GroupBox>
                <GroupBox Header="中间件" Margin="4,4" Style="{StaticResource GroupBoxTab.Small}"
            Visibility="{Binding ShowEdit,Converter={StaticResource Boolean2VisibilityConverter}}">
                    <TabControl TabStripPlacement="Top" Style="{StaticResource TabControlSliding}">
                        <TabItem Header="流程">
                            <ItemsControl ItemsSource="{Binding Model.FlowMiddlewares}" dd:DragDrop.IsDragSource="True" dd:DragDrop.IsDropTarget="True" dd:DragDrop.DropHandler="{Binding}"  >
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <CheckBox Content="{Binding Name}" IsChecked="{Binding Selected,Mode=TwoWay}" Margin="2"/>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </TabItem>
                        <TabItem Header="步骤组">
                            <ItemsControl ItemsSource="{Binding Model.StepGroupMiddlewares}" dd:DragDrop.IsDragSource="True" dd:DragDrop.IsDropTarget="True" dd:DragDrop.DropHandler="{Binding}" >
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <CheckBox Content="{Binding Name}" IsChecked="{Binding Selected,Mode=TwoWay}" Margin="2"/>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </TabItem>
                        <TabItem Header="步骤">
                            <ItemsControl ItemsSource="{Binding Model.StepMiddlewares}" dd:DragDrop.IsDragSource="True" dd:DragDrop.IsDropTarget="True" dd:DragDrop.DropHandler="{Binding}">
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <CheckBox Content="{Binding Name}" IsChecked="{Binding Selected,Mode=TwoWay}" Margin="2"/>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </TabItem>
                    </TabControl>


                </GroupBox>
            </WrapPanel>
        </ScrollViewer>

        <rxui:RoutedViewHost  DockPanel.Dock="Bottom"
   Visibility="{Binding Model.ShowView,Converter={StaticResource Boolean2VisibilityConverter}}" 
   Router="{Binding Model.Router}">
            <rxui:RoutedViewHost.DefaultContent>
                <Grid>
                </Grid>
            </rxui:RoutedViewHost.DefaultContent>
            <rxui:RoutedViewHost.ViewLocator>
                <app:AppViewLocator />
            </rxui:RoutedViewHost.ViewLocator>
        </rxui:RoutedViewHost>

        <Grid DockPanel.Dock="Bottom"
              Visibility="{Binding ShowLog,Converter={StaticResource Boolean2VisibilityConverter}}" MinHeight="100">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>

            <ListBox ItemsSource="{Binding DataDisplay.Log}" Grid.Column="0" x:Name="logListbox" Style="{StaticResource ListBoxCustom}" Height="200">
                <ListBox.ItemTemplate>
                    <DataTemplate>
                        <TextBlock Text="{Binding Log}" />
                    </DataTemplate>
                </ListBox.ItemTemplate>
            </ListBox>
            <DataGrid  ItemsSource="{Binding DataDisplay.FlowGlobeData}"
                       Grid.Column="1"
Style="{StaticResource DataGrid.Small}"  
AutoGenerateColumns="False" IsReadOnly="True" >
                <DataGrid.Columns>
                    <DataGridTextColumn Header="键" Binding="{Binding  Name}" />
                    <DataGridTextColumn Header="值" Binding="{Binding  Value}"/>
                </DataGrid.Columns>
            </DataGrid>
            <StackPanel Grid.ColumnSpan="1" HorizontalAlignment="Right" VerticalAlignment="Top" Orientation="Horizontal">
                <Button Content="X"  Command="{Binding CloseLogCommand}" />
                <Button Content="{Binding LogName}"  Command="{Binding ShowAllLogCommand}" />
            </StackPanel>
        </Grid>
        <Grid  >
            <TreeView ItemsSource="{Binding Model.Steps}"
                            Visibility="{Binding ShowList,Converter={StaticResource Boolean2VisibilityReConverter}}"
                          HorizontalAlignment="Stretch"
               Style="{StaticResource TreeView.Small}">
                <TreeView.ItemTemplate>
                    <HierarchicalDataTemplate
                       ItemsSource="{Binding Steps}"
                       DataType="vms:MonitorStepInfoViewModel">
                        <StackPanel Orientation="Horizontal">
                            <StackPanel Visibility="{Binding DataContext.Model.SingleRun,Converter={StaticResource Boolean2VisibilityConverter},ElementName=page}">
                                <Button  Foreground="MediumSpringGreen" Visibility="{Binding SingleRunning,Converter={StaticResource Boolean2VisibilityReConverter}}"  Command="{Binding DataContext.RunSingleCommand,ElementName=page}" CommandParameter="{Binding .}" Background="Transparent">
                                    <iconPacks:PackIconPixelartIcons Kind="DebugPlay" />
                                    <Button.Style>
                                        <Style TargetType="Button" BasedOn="{StaticResource ButtonCustom}">
                                        </Style>
                                    </Button.Style>
                                </Button>
                                <Button  Foreground="OrangeRed"  Visibility="{Binding SingleRunning,Converter={StaticResource Boolean2VisibilityConverter}}" Command="{Binding DataContext.StopSingleCommand,ElementName=page}" CommandParameter="{Binding .}" Background="Transparent">
                                    <iconPacks:PackIconPixelartIcons Kind="DebugStop" />
                                    <Button.Style>
                                        <Style TargetType="Button" BasedOn="{StaticResource ButtonCustom}">
                                        </Style>
                                    </Button.Style>
                                </Button>
                            </StackPanel>

                            <Button 
                             Width="15" Height="15" Margin="3" 
                             Visibility="{Binding DataContext.CanDebug,Converter={StaticResource Boolean2VisibilityConverter},ElementName=page}"
                             hc:BorderElement.CornerRadius="10">

                                <Button.CommandParameter>
                                    <MultiBinding Converter="{StaticResource MonitorDebugConverter}">
                                        <Binding Path="DataContext.Model" ElementName="page"/>
                                        <Binding Path="."/>
                                    </MultiBinding>
                                </Button.CommandParameter>
                                <Button.Style>
                                    <Style TargetType="Button" BasedOn="{StaticResource ButtonBaseStyle}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Debugging}" Value="True">
                                                <Setter Property="Background" Value="Orange"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding IsDebug}" Value="True">
                                                <Setter Property="BorderBrush" Value="Red"/>
                                                <Setter Property="BorderThickness" Value="3"/>
                                                <Setter Property="Command" Value="{Binding DataContext.RemoveDebugCommand,ElementName=page}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding IsDebug}" Value="False">
                                                <Setter Property="Command" Value="{Binding DataContext.AddDebugCommand,ElementName=page}"/>
                                            </DataTrigger>

                                        </Style.Triggers>
                                    </Style>
                                </Button.Style>
                            </Button>
                            <Button Margin="10,0" Content="{Binding DisplayName}" VerticalAlignment="Center" Command="{Binding DataContext.ShowStepLogCommand,ElementName=page}" CommandParameter="{Binding .}"   >
                                <Button.Style>
                                    <Style TargetType="Button" BasedOn="{StaticResource ButtonCustom}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding State}" Value="Error">
                                                <Setter Property="Foreground" Value="OrangeRed"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding State}" Value="Complete">
                                                <Setter Property="Foreground" Value="ForestGreen"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding State}" Value="Skip">
                                                <Setter Property="Foreground" Value="YellowGreen"/>
                                            </DataTrigger>

                                        </Style.Triggers>
                                    </Style>
                                </Button.Style>
                            </Button>
                            <TextBlock Text="{Binding UsedTime, StringFormat={}{0:hh\\:mm\\:ss\\.fff}}" VerticalAlignment="Center"/>
                            <TextBlock Margin="10,0,0,0" Text="{Binding CurrentIndex}" VerticalAlignment="Center"/>
                            <TextBlock Text="{Binding Repeat,StringFormat={}/{0}}" VerticalAlignment="Center"/>
                            <TextBlock Margin="10,0,0,0" Text="{Binding ErrorIndex}" VerticalAlignment="Center"/>
                            <TextBlock Text="{Binding Retry,StringFormat={}/{0}}" VerticalAlignment="Center"/>
                            <TextBlock Margin="10,0,0,0" Text="F" ToolTip="总是执行" Visibility="{Binding Finally,Converter={StaticResource Boolean2VisibilityConverter}}" Foreground="Purple" FontWeight="Bold" VerticalAlignment="Center"/>
                            <TextBlock Margin="10,0,0,0" Foreground="Red" FontWeight="Bold" VerticalAlignment="Center">
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding ErrorHandling}" Value="Finally">
                                                <Setter Property="Visibility" Value="Visible"/>
                                                <Setter Property="Text" Value="E"/>
                                                <Setter Property="ToolTip" Value="错误后停止"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding ErrorHandling}" Value="Terminate">
                                                <Setter Property="Visibility" Value="Visible"/>
                                                <Setter Property="Text" Value="T"/>
                                                <Setter Property="ToolTip" Value="错误后立即退出"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                            <!--<Button Content="日志" Margin="10,0,0,0" Foreground="White" Command="{Binding DataContext.ShowStepLogCommand,ElementName=page}" CommandParameter="{Binding .}">
                                <Button.Style>
                                    <Style TargetType="Button" BasedOn="{StaticResource ButtonCustom}">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType=TreeViewItem}}" Value="True">
                                                <Setter Property="Visibility" Value="Visible"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Button.Style>
                            </Button>-->
                        </StackPanel>
                    </HierarchicalDataTemplate>
                </TreeView.ItemTemplate>
            </TreeView>

            <DataGrid
                          Visibility="{Binding ShowList,Converter={StaticResource Boolean2VisibilityConverter}}"
Style="{StaticResource DataGrid.Small}"
ItemsSource="{Binding DataDisplay.StepLogs}" AutoGenerateColumns="False"  IsReadOnly="True" SelectionMode="Single"  SelectedItem="{Binding SelectedStepOnce}">
                <DataGrid.RowStyle>
                    <Style TargetType="DataGridRow">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding State}" Value="Error">
                                <Setter Property="Background" Value="Pink" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding State}" Value="Complete">
                                <Setter Property="Background" Value="SpringGreen" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding State}" Value="Skip">
                                <Setter Property="Background" Value="LightGoldenrodYellow" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </DataGrid.RowStyle>
                <DataGrid.CellStyle>
                    <Style TargetType="DataGridCell" BasedOn="{StaticResource DataGridCellStyle.Small}">
                        <Style.Triggers>
                            <!-- 失去焦点时的背景颜色触发器 -->
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                                    <Condition Binding="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource AncestorType=DataGrid}}" Value="False"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" Value="Transparent"/>
                            </MultiDataTrigger>
                        </Style.Triggers>
                    </Style>
                </DataGrid.CellStyle>
                <DataGrid.Columns>
                    <DataGridTemplateColumn Header="名称">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <Button Content="{Binding Name}" Command="{Binding DataContext.ShowStepOnceLogCommand,ElementName=page}" CommandParameter="{Binding .}" Style="{StaticResource ButtonCustom}" Foreground="White"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTextColumn Header="开始" Binding="{Binding  StartTime,StringFormat={}{0:yyyy-MM-dd HH:mm:ss}}"/>
                    <DataGridTextColumn Header="结束" Binding="{Binding  EndTime,StringFormat={}{0:HH:mm:ss}}"/>
                    <DataGridTextColumn Header="执行次数" Binding="{Binding  Index}"/>
                </DataGrid.Columns>
            </DataGrid>
        </Grid>
    </DockPanel>

</rxui:ReactiveUserControl>
